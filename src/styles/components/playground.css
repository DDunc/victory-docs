/** Interactive/Component Playground
 * pre
 * |- .Interactive
 *    |- .playground
 *        |- .playgroundCode
 *        |  |- .playgroundStage
 *        |- .playgroundPreview
 *          |- div
 *             |- .playgroundError
 *              |- .previewArea
 *                |- div
**/
:root {
  --initialHeight: 280px;
}
.Ecology pre {
  padding: 0;
}

.playgroundsMaxHeight .Interactive .playgroundStage,
.Recipe .Interactive .playgroundStage {
  height: var(--initialHeight);
}

.Interactive {
  background-color: color(var(--codeMirrorbg) a(50%));
  position: relative;
  width: 100%;
}

.Interactive .playground {
  position: relative;
  z-index: 1;
  display: flex;
  flex-direction: column;
  flex-wrap: none;
  padding: 0;

  @media (--small-viewport) {
    flex-direction: row;
  }
}

.Interactive .playgroundCode {
  flex: auto;
  order: 2;
  margin: 0 0 var(--gutter-small) 0;
  position: relative;
}

.Interactive .playgroundCode:before,
.Interactive .playgroundPreview:before {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;

  color: var(--codeMirrorComment);
  font-family: var(--fontSubHeading);
  font-size: 0.9em;
  line-height: 1;
  letter-spacing: 0.15em;
  text-align: center;
  text-transform: uppercase;
}

.Interactive .playgroundCode:before {
  content: "Editable Source";
  padding: 1.25em 0.5em;
  top: inherit;
  bottom: 100%;
}

.Interactive .playgroundStage {
  background-color: var(--codeMirrorbgDim);
  overflow: auto;
  padding: var(--gutter-small) var(--gutter);
  width: 80%;
  margin: 0 auto;
  height: 100%;
  resize: both;
  transition: background-color 195ms ease-in;
}

.Interactive .playgroundStage.ReactCodeMirror--focused {
  /* Focused state when editing code */
  background-color: var(--codeMirrorbgFocused);
  transition: background-color 250ms ease-out;
}

.Interactive .playgroundPreview {
  align-items: center;
  display: flex;
  flex: 1 1 var(--initialHeight);
  justify-content: center;
  order: 1;
  position: relative;
  text-align: center;
}

.Interactive .playgroundPreview:before {
  content: "Live Preview";
  padding: 1.25em 0.5em;

}

.Interactive .playgroundPreview > div:first-child {
  width: 100%;
  margin: 0 auto;
}

.Interactive .previewArea {
  background-color: white;
  height: 100%;
  min-height: calc(var(--initialHeight)* 0.5);
  width: 80%;
  margin: 3em auto;
}

.Interactive .previewArea > div:first-child {
  height: inherit;
  max-height: 100%;
  width: auto;
}

.Interactive .playgroundPreview .VictoryContainer svg {
  margin: 0 auto;
  max-height: calc(var(--initialHeight) - 40px);
  max-width: 100%;
  width: auto !important; /* override default Victory inline styles */
}

.Interactive .playgroundError {
  background: var(--darkRed);
  color: var(--white);
  font-family: var(--fontMonospace);
  font-size: 1rem;
  font-weight: normal;
  line-height: 1.2;
  overflow: scroll;
  padding: var(--gutter-small);
  text-align: left;
  white-space: pre;
  width: 100%;
}

/**
 * Code Mirror Color Theme
**/
.CodeMirror-line {
  background: none !important;
}

.cm-s-elegant.CodeMirror {
  height: auto;
  overflow: hidden;
  padding: 0;

  background: none !important;
  color: var(--codeMirrorPunctuation);
  font-family: var(--fontMonospace);
  font-size: 0.9em;
  font-variant-ligatures: none;
  hyphens: none;
  line-height: 1.5;
  tab-size: 2;
  text-shadow: 0 1px white;
  white-space: pre;
  word-break: normal;
  word-spacing: normal;
  word-wrap: normal;
}
.cm-s-elegant .CodeMirror-selected { /* text selection */
  background: var(--codeMirrorbgSelected);
  color: white;
}
.cm-s-elegant .CodeMirror-activeline {
  background: var(--codeMirrorbgSelected);
}
.cm-s-elegant .CodeMirror-activeline-background {
  background: var(--codeMirrorbgSelected);
}
.cm-s-elegant .CodeMirror-gutters {
  background: var(--codeMirrorbg) !important;
}
.cm-s-elegant .CodeMirror-foldgutter-open,
.CodeMirror-foldgutter-folded {
  color: #999;
}
.cm-s-elegant div.CodeMirror-cursor {
  border-left: 1px solid black !important;
}
.cm-s-elegant span.cm-builtin {
  color: #fff;
  text-decoration: underline;
}
.cm-s-elegant span.cm-atom {
  color: var(--codeMirrorFunction);
}
.cm-s-elegant span.cm-attribute {
  color: black;
}
.cm-s-elegant span.cm-comment {
  color: var(--codeMirrorComment);
}
.cm-s-elegant span.cm-def {
  color: black;
}
.cm-s-elegant span.cm-header {
  color: var(--codeMirrorbgSelected);
}
.cm-s-elegant span.cm-keyword {
  color: var(--codeMirrorKeyword);
}
.cm-s-elegant span.cm-meta {
  color: var(--codeMirrorbgSelected);
}
.cm-s-elegant span.cm-number {
  color: var(--codeMirrorNumber);
}
.cm-s-elegant span.cm-operater,
.cm-s-elegant span.cm-operator {
  color: var(--codeMirrorOperator);
}
.cm-s-elegant span.cm-property {
  color: var(--codeMirrorFunction);
}
.cm-s-elegant span.cm-qualifier {
  color: var(--codeMirrorFunction);
}
.cm-s-elegant span.cm-string {
  color: var(--codeMirrorSelector);
}
.cm-s-elegant span.cm-string-2 {
  color: var(--codeMirrorSelector);
}
.cm-s-elegant span.cm-tag {
  color: black;
}
.cm-s-elegant span.cm-tag.cm-bracket,
.cm-s-elegant span.cm-bracket {
  color: var(--codeMirrorPunctuation);
}
.cm-s-elegant span.cm-variable,
.cm-s-elegant span.cm-variable-2 {
  color: black;
}
.cm-s-elegant span.CodeMirror-matchingbracket {
  box-sizing: border-box;
  background: transparent;
  border-bottom: 1px solid;
}
.cm-s-elegant span.CodeMirror-nonmatchingbracket {
  border-bottom: 1px solid;
  background: none;
}
